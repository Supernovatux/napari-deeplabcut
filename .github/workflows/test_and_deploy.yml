# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: tests

on:
  push:
    branches:
      - main
      - npe2
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
      - npe2
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: true
        type: boolean

jobs:
  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # These libraries enable testing on Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      # Strategy borrowed from vispy for installing opengl libs on Windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1
          if (Test-Path -Path "C:\Windows\system32\opengl32.dll" -PathType Leaf) {Exit 0} else {Exit 1}

      # Set up Miniconda
      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}

      # Initialize Conda on Linux/macOS
      - name: Initialize Conda (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          conda init bash

      - name: Create and activate environment (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          conda create --name test-env python=${{ matrix.python-version }} -y
          source activate test-env
          conda install -c conda-forge pytables==3.8.0 -y
          python -m pip install --upgrade pip
          python -m pip install setuptools tox tox-gh-actions

      # Initialize Conda on Windows
      - name: Initialize Conda (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          C:\Miniconda\Scripts\conda.exe init powershell

      - name: Create and activate environment (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          C:\Miniconda\Scripts\conda.exe create --name test-env python=${{ matrix.python-version }} -y
          conda activate test-env
          C:\Miniconda\Scripts\conda.exe install -c conda-forge pytables==3.8.0 -y
          python -m pip install --upgrade pip
          python -m pip install setuptools tox tox-gh-actions

      # This runs the platform-specific tests declared in tox.ini
      - name: Test with tox (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash -l {0}
        run: |
          source activate test-env
          python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Test with tox (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          conda activate test-env
          python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Coverage
        uses: codecov/codecov-action@v4

  deploy:
    # This will run when you have tagged a commit, starting with "v*"
    # and requires that you have put your twine API key in your
    # github secrets (see readme for details)
    needs: [test]
    runs-on: ubuntu-latest
    if: |
      always() &&
      inputs.force_deploy ||
      (contains(github.ref, 'tags') && contains(needs.test.result, 'success'))
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U setuptools setuptools_scm wheel twine build
      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
        run: |
          git tag
          python -m build .
          twine upload dist/*
